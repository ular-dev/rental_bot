// rental_bot_v2.js
require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
const USERS_FILE = path.join(__dirname, "users.json");

const ADMIN_ID = 8185930364;
const MAX_ITEMS_PER_HOUR = 12;
const TWO_DAYS_MS = 2 * 24 * 60 * 60 * 1000;

if (!fs.existsSync(USERS_FILE)) fs.writeFileSync(USERS_FILE, "{}", "utf8");

const cities = [
  { name: "–ë–∏—à–∫–µ–∫", id: 103184 },
  { name: "–û—à", id: 103218 },
];

const districts = {
  –ë–∏—à–∫–µ–∫: [
    { name: "–í—Å–µ —Ä–∞–π–æ–Ω—ã", id: null },
    { name: "–ê—Å–∞–Ω–±–∞–π", id: 23249 },
    { name: "–ê—Ç–∞-–¢—é—Ä–∫ –ø–∞—Ä–∫", id: 30250 },
    { name: "–ë–∏—à–∫–µ–∫ –ü–∞—Ä–∫ –¢–†–¶", id: 30256 },
    { name: "–î–∂–∞–ª –º–∫—Ä", id: 23217 },
    { name: "–Æ–≥-2", id: 27210 },
    { name: "–í–æ—Å—Ç–æ–∫-5", id: 23200 },
    { name: "–¢—É–Ω–≥—É—á", id: 23206 },
    { name: "–ú–æ—Å—Å–æ–≤–µ—Ç", id: 27222 },
    { name: "–ê–ª–∞–º–µ–¥–∏–Ω-1", id: 23245 },
    { name: "–ê–ª–∞–º–µ–¥–∏–Ω—Å–∫–∏–π —Ä—ã–Ω–æ–∫", id: 23211 },
    { name: "12 –º–∫—Ä", id: 30231 },
    { name: "7 –º–∫—Ä", id: 30236 },
    { name: "–û—Ä—Ç–æ-–°–∞–π", id: 23202 },
    { name: "–ö—ã–∑—ã–ª-–ê—Å–∫–µ—Ä", id: 23235 },
    { name: "–£—á–∫—É–Ω", id: 23225 },
    { name: "–ü–æ–ª–∏—Ç–µ—Ö", id: 5014 },
    { name: "–¶–£–ú", id: 5015 },
  ],
  –û—à: [
    { name: "–í—Å–µ —Ä–∞–π–æ–Ω—ã", id: null },
    { name: "–ê–º–∏—Ä-–¢–µ–º—É—Ä", id: 6001 },
    { name: "–ö—É—Ä–º–∞–Ω–∂–∞–Ω-–î–∞—Ç–∫–∞", id: 6002 },
    { name: "–ß–µ—Ä—ë–º—É—à–∫–∏", id: 6003 },
    { name: "–í–û–ï–ù–ì–û–†–û–î–û–ö", id: 6004 },
  ],
};

const roomOptions = [
  { name: "1 –∫–æ–º–Ω–∞—Ç–∞", id: 2773 },
  { name: "2 –∫–æ–º–Ω–∞—Ç—ã", id: 2774 },
  { name: "3 –∫–æ–º–Ω–∞—Ç—ã", id: 2775 },
  { name: "4 –∫–æ–º–Ω–∞—Ç—ã", id: 2776 },
];

bot.setMyCommands([
  { command: "/start", description: "üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
  { command: "/subinfo", description: "üîê –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏ ID" },
]);

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const users = readUsers();

  users[chatId] = users[chatId] || {
    id: msg.from.id,
    city: null,
    district: null,
    room: null,
    sentItems: [],
  };

  const user = users[chatId];
  const now = Date.now();
  user.sentItems = user.sentItems.filter(
    (item) => now - item.sentAt < TWO_DAYS_MS
  );
  const sentThisHour = user.sentItems.filter(
    (item) => now - item.sentAt < 60 * 60 * 1000
  );

  saveUsers(users);

  if (sentThisHour.length >= MAX_ITEMS_PER_HOUR) {
    return bot.sendMessage(
      chatId,
      `‚è≥ –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ ${MAX_ITEMS_PER_HOUR} –∫–≤–∞—Ä—Ç–∏—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }

  sendCitySelection(chatId);
});

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const users = readUsers();
  users[chatId] = users[chatId] || {
    id: query.from.id,
    city: null,
    district: null,
    room: null,
    sentItems: [],
  };
  const user = users[chatId];

  if (query.data === "change_filter") {
    user.city = null;
    user.district = null;
    user.room = null;
    saveUsers(users);
    bot.answerCallbackQuery(query.id);
    return sendCitySelection(chatId);
  }

  if (query.data === "buy_subscription") {
    bot.answerCallbackQuery(query.id);
    bot.sendMessage(
      chatId,
      `üìÖ <b>–¢–∞—Ä–∏—Ñ—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>
  ‚Ä¢ 1 –¥–µ–Ω—å ‚Äî 200 —Å–æ–º
  ‚Ä¢ 3 –¥–Ω—è ‚Äî 500 —Å–æ–º
  
  üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> 0504 399 696 (–ï–¥–∏–Ω–∏—Ü–∞)
  
  üì© –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ @rental_kg –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.`,
      { parse_mode: "HTML" }
    );
  }

  if (query.data === "show_5") {
    if (!user.city || !user.room || !user.district) {
      return bot.sendMessage(
        chatId,
        "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã: –≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç."
      );
    }
    bot.answerCallbackQuery(query.id);
    const now = Date.now();
    user.sentItems = user.sentItems.filter(
      (item) => now - item.sentAt < TWO_DAYS_MS
    );

    const sentThisHour = user.sentItems.filter(
      (item) => now - item.sentAt < 60 * 60 * 1000
    );

    if (sentThisHour.length >= MAX_ITEMS_PER_HOUR) {
      user.limitReachedAt = now;
      saveUsers(users);
      return bot.sendMessage(
        chatId,
        `‚è≥ –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ ${MAX_ITEMS_PER_HOUR} –∫–≤–∞—Ä—Ç–∏—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
      );
    }

    try {
      const response = await axios.get(
        "https://lalafo.kg/api/search/v3/feed/search",
        {
          headers: { "User-Agent": "Mozilla/5.0", device: "pc" },
          params: {
            expand: "url",
            "per-page": 100,
            category_id: 2044,
            city_id: user.city.id,
            "parameters[69][0]": user.room.id,
            "parameters[357][0]": user.district.id,
            "parameters[2149][0]": 19057,
          },
        }
      );

      const availableItems = response.data.items || [];

      const newItems = availableItems
        .filter(
          (item) =>
            !user.sentItems.some((si) => si.id === item.id) && item.mobile
        )
        .slice(0, 2);

      if (!newItems.length) {
        return bot.sendMessage(
          chatId,
          "üì≠ –ù–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
      for (const item of newItems) {
        const counter = user.sentItems.length + 1;
        const hasSubscription =
          user.hasSubscriptionUntil && Date.now() < user.hasSubscriptionUntil;
        const caption = `
üè† <b>${item.title || "–û–±—ä—è–≤–ª–µ–Ω–∏–µ"}</b>

üíµ –¶–µ–Ω–∞: ${item.price || "-"} ${item.symbol || ""}
üìç –†–∞–π–æ–Ω: ${user.district.name}
üõè –ö–æ–º–Ω–∞—Ç—ã: ${user.room.name}
   –ù–æ–º–µ—Ä: ${hasSubscription ? item.mobile : "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"}
`;

        const buttons = hasSubscription
          ? undefined
          : {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                      callback_data: "buy_subscription",
                    },
                  ],
                ],
              },
            };

        const media = (item.images || [])
          .filter(
            (img) => img.original_url && img.original_url.startsWith("http")
          )
          .slice(0, 5)
          .map((img, idx) => ({
            type: "photo",
            media: img.original_url,
            caption: idx === 0 ? caption : undefined,
            parse_mode: idx === 0 ? "HTML" : undefined,
          }));

        try {
          if (media.length) {
            await bot.sendMediaGroup(chatId, media);
            if (!hasSubscription) {
              await bot.sendMessage(
                chatId,
                `üîí <b>–ù–æ–º–µ—Ä —Å–∫—Ä—ã—Ç</b>\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä–∞–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n\n‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ: @rental_kg`,
                {
                  parse_mode: "HTML",
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                          callback_data: "buy_subscription",
                        },
                      ],
                    ],
                  },
                }
              );
            }
          } else {
            await bot.sendMessage(chatId, caption, {
              parse_mode: "HTML",
              ...buttons,
            });
          }
          await new Promise((r) => setTimeout(r, 2000));
        } catch (err) {
          if (
            err.response?.statusCode === 403 ||
            err.message.includes("bot was blocked")
          ) {
            console.log(
              `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è—é...`
            );
            delete users[chatId];
            saveUsers(users);
            return;
          } else {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err.message);
          }
        }

        const alreadySent = user.sentItems.some((i) => i.id === item.id);
        if (!alreadySent) {
          user.sentItems.push({
            id: item.id,
            counter,
            mobile: item.mobile,
            sentAt: now,
          });
        }
      }

      saveUsers(users);
      if (
        user.sentItems.filter((item) => now - item.sentAt < 60 * 60 * 1000)
          .length < MAX_ITEMS_PER_HOUR
      ) {
        bot.sendMessage(chatId, "–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ—â—ë?", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 2 –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data: "show_5" }],
              [{ text: "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data: "change_filter" }],
            ],
          },
        });
      } else {
        user.limitReachedAt = now;
        saveUsers(users);
        bot.sendMessage(
          chatId,
          `‚è≥ –í—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ ${MAX_ITEMS_PER_HOUR} –∫–≤–∞—Ä—Ç–∏—Ä üè† –∑–∞ —ç—Ç–æ—Ç —á–∞—Å.

          üîî –ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥–ª—è–Ω–∏—Ç–µ!`
        );
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä:", e.message);
      bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    return;
  }

  if (query.data.startsWith("city_")) {
    const cityName = query.data.replace("city_", "");
    const city = cities.find((c) => c.name === cityName);
    user.city = city;
    user.district = null;
    saveUsers(users);
    return sendDistrictSelection(chatId, cityName);
  }

  if (query.data.startsWith("district_")) {
    const districtName = query.data.replace("district_", "");
    const district = Object.values(districts)
      .flat()
      .find((d) => d.name === districtName);
    user.district = district;
    saveUsers(users);
    return sendRoomSelection(chatId);
  }

  if (query.data.startsWith("room_")) {
    const roomName = query.data.replace("room_", "");
    const room = roomOptions.find((r) => r.name === roomName);
    user.room = room;
    saveUsers(users);
    bot.sendMessage(chatId, "‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–æ–∫–∞–∑–∞—Ç—å 2 –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data: "show_5" }],
          [{ text: "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data: "change_filter" }],
        ],
      },
    });
  }
});

function sendCitySelection(chatId) {
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", {
    reply_markup: {
      inline_keyboard: cities.map((city) => [
        { text: city.name, callback_data: `city_${city.name}` },
      ]),
    },
  });
}

function sendDistrictSelection(chatId, cityName) {
  const rows = [];
  const list = districts[cityName] || [];
  for (let i = 0; i < list.length; i += 2) {
    const row = [
      { text: list[i].name, callback_data: `district_${list[i].name}` },
    ];
    if (list[i + 1]) {
      row.push({
        text: list[i + 1].name,
        callback_data: `district_${list[i + 1].name}`,
      });
    }
    rows.push(row);
  }
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", {
    reply_markup: { inline_keyboard: rows },
  });
}

function sendRoomSelection(chatId) {
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", {
    reply_markup: {
      inline_keyboard: roomOptions.map((room) => [
        { text: room.name, callback_data: `room_${room.name}` },
      ]),
    },
  });
}

function readUsers() {
  return JSON.parse(fs.readFileSync(USERS_FILE, "utf8"));
}

function saveUsers(data) {
  fs.writeFileSync(USERS_FILE, JSON.stringify(data, null, 2));
}

bot.onText(/\/sub (\d+) (\d+)/, (msg, match) => {
  if (msg.from.id !== ADMIN_ID) return;

  const userId = match[1];
  const days = parseInt(match[2], 10);
  const users = readUsers();

  if (!users[userId]) {
    return bot.sendMessage(msg.chat.id, "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }

  const now = Date.now();
  const currentExpiry = users[userId].hasSubscriptionUntil || 0;
  const baseTime = currentExpiry > now ? currentExpiry : now;

  users[userId].hasSubscriptionUntil = baseTime + days * 24 * 60 * 60 * 1000;
  users[userId].sentItems = [];

  delete users[userId].limitReachedAt;

  saveUsers(users);

  const untilDate = new Date(users[userId].hasSubscriptionUntil).toLocaleString(
    "ru-RU",
    { timeZone: "Asia/Bishkek" }
  );
  bot.sendMessage(
    msg.chat.id,
    `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${untilDate} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`
  );

  const subText =
    `üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n` +
    `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>${untilDate}</b>\n\n` +
    `–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.`;

  bot.sendMessage(userId, subText, { parse_mode: "HTML" });

  if (users[userId].city && users[userId].district && users[userId].room) {
    bot.sendMessage(userId, "üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–æ–∫–∞–∑–∞—Ç—å 2 –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data: "show_5" }],
          [{ text: "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data: "change_filter" }],
        ],
      },
    });
  } else {
    bot
      .sendMessage(
        userId,
        "üìå –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã: –≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç."
      )
      .then(() => {
        sendCitySelection(userId);
      });
  }
});

bot.onText(/\/subinfo/, (msg) => {
  const users = readUsers();
  const user = users[msg.chat.id];

  if (!user) {
    return bot.sendMessage(msg.chat.id, "–í—ã –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞.");
  }

  const now = Date.now();
  const hasSub = user.hasSubscriptionUntil && user.hasSubscriptionUntil > now;
  const untilDate = hasSub
    ? new Date(user.hasSubscriptionUntil).toLocaleString("ru-RU", {
        timeZone: "Asia/Bishkek",
      })
    : "-";

  bot.sendMessage(
    msg.chat.id,
    `üì± <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> ${hasSub ? "–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ" : "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå"}\n` +
      `‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${untilDate}\n` +
      `üÜî <b>–í–∞—à ID:</b> <code>${msg.chat.id}</code>`,
    { parse_mode: "HTML" }
  );
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  const users = readUsers();
  const now = Date.now();

  Object.entries(users).forEach(async ([chatId, user]) => {
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
    if (user.hasSubscriptionUntil && user.hasSubscriptionUntil < now) {
      delete user.hasSubscriptionUntil;
      saveUsers(users);
      try {
        await bot.sendMessage(
          chatId,
          "‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞–º–∏ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
        );
      } catch (err) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ ${chatId}:`,
          err.message
        );
      }
    }

    if (user.limitReachedAt && now - user.limitReachedAt >= 60 * 60 * 1000) {
      delete user.limitReachedAt;
      saveUsers(users);
      try {
        await bot.sendMessage(
          chatId,
          "‚úÖ –ü—Ä–æ—à–µ–ª —á–∞—Å ‚Äî –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "–ü–æ–∫–∞–∑–∞—Ç—å 2 –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data: "show_5" }],
              ],
            },
          }
        );
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${chatId}:`, err.message);
      }
    }
  });
}, 10 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
